/**
 * @packageDocumentation
 * @module api.functional.users
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { CreateUserDto } from "../../../users/dto/create-user.dto";
import type { UpdateUserDto } from "../../../users/dto/update-user.dto";

/**
 * @controller UsersController.create
 * @path POST /users
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  createUserDto: create.Input,
): Promise<create.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...create.METADATA,
      template: create.METADATA.path,
      path: create.path(),
    },
    createUserDto,
  );
}
export namespace create {
  export type Input = Primitive<CreateUserDto>;
  export type Output = Primitive<string>;

  export const METADATA = {
    method: "POST",
    path: "/users",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/users";
}

/**
 * @controller UsersController.findAll
 * @path GET /users
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function findAll(
  connection: IConnection,
): Promise<findAll.Output> {
  return PlainFetcher.fetch(connection, {
    ...findAll.METADATA,
    template: findAll.METADATA.path,
    path: findAll.path(),
  });
}
export namespace findAll {
  export type Output = Primitive<string>;

  export const METADATA = {
    method: "GET",
    path: "/users",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/users";
}

/**
 * @controller UsersController.findOne
 * @path GET /users/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function findOne(
  connection: IConnection,
  id: string,
): Promise<findOne.Output> {
  return PlainFetcher.fetch(connection, {
    ...findOne.METADATA,
    template: findOne.METADATA.path,
    path: findOne.path(id),
  });
}
export namespace findOne {
  export type Output = Primitive<string>;

  export const METADATA = {
    method: "GET",
    path: "/users/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string) =>
    `/users/${encodeURIComponent(id ?? "null")}`;
}

/**
 * @controller UsersController.update
 * @path PATCH /users/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
  connection: IConnection,
  id: string,
  updateUserDto: update.Input,
): Promise<update.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...update.METADATA,
      template: update.METADATA.path,
      path: update.path(id),
    },
    updateUserDto,
  );
}
export namespace update {
  export type Input = Primitive<UpdateUserDto>;
  export type Output = Primitive<string>;

  export const METADATA = {
    method: "PATCH",
    path: "/users/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string) =>
    `/users/${encodeURIComponent(id ?? "null")}`;
}

/**
 * @controller UsersController.remove
 * @path DELETE /users/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function remove(
  connection: IConnection,
  id: string,
): Promise<remove.Output> {
  return PlainFetcher.fetch(connection, {
    ...remove.METADATA,
    template: remove.METADATA.path,
    path: remove.path(id),
  });
}
export namespace remove {
  export type Output = Primitive<string>;

  export const METADATA = {
    method: "DELETE",
    path: "/users/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string) =>
    `/users/${encodeURIComponent(id ?? "null")}`;
}
